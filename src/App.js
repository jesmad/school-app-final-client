import React, { Component } from "react";
import "./App.css";

import axios from "axios";

//React Router
import { BrowserRouter, Switch, Route } from "react-router-dom";
/*  
    BrowserRouter is a wrapper component that handles the different top-level components that will be displayed on the client side
    Switch is a component that ensures that only one component is rendered at a time (children must be Route or Redirect components)
    Route is a component that render some component when its path matches the current URL
*/

//jwt-decode is a small browser library that helps decoding JWTs token which are Base64Url encoded
import jwtDecode from "jwt-decode";

//Top Navigation Bar
import Navbar from "./components/Navbar.js";
import AuthRoute from "./components/AuthRoute.js";

//Pages
import home from "./pages/home.js";
import login from "./pages/login.js";
import signup from "./pages/signup.js";
import SchoolHome from "./pages/schoolHome.js";

//Redux
import { Provider } from "react-redux";
//The <Provider /> makes the Redux store available to any nested components that have been wrapped in the connect() function.
import store from "./redux/store.js";
import { SET_AUTHENTICATED } from "./redux/types.js";
import { logoutUser, getUserData } from "./redux/actions/userActions.js";
//import Axios from "axios";

//JSON Web Token(generated by Firebase) // "FBIdToken"  -> "Bearer token_here"
const token = localStorage.getItem("FBIdToken");
//let authenticated;

if (token) {
  const decoded = jwtDecode(token);
  /*  
  decoded = {
      "iss": "https://securetoken.google.com/school-app-final",
      "aud": "school-app-final",
      "auth_time": 1588207020,
      "user_id": "S2Vgvfgc73ar4xaqlET5L23cFrW2",
      "sub": "S2Vgvfgc73ar4xaqlET5L23cFrW2",
      "iat": 1588207020,
      "exp": 1588210620,                  <------------------------ Expiration time (in seconds since Unix Epoch)
      "email": "tere@gmail.com",
      "email_verified": false,
      "firebase": {
          "identities": {
          "email": [
              "tere@gmail.com"
            ]
       },
      "sign_in_provider": "password"
    }
  }
  */

  //if token.expiration date (in milliseconds) < current time (in milliseconds)
  if (decoded.exp * 1000 < Date.now()) {
    //Token expired, redirect user to /login

    window.location.href = "/login";
    store.dispatch(logoutUser());
    //authenticated = false;
  } else {
    store.dispatch({ type: SET_AUTHENTICATED });
    axios.defaults.headers.common["Authorization"] = token;
    store.dispatch(getUserData());
    //authenticated = true;
  }
}

//Nedd to authenticate sometjing
class App extends Component {
  render() {
    return (
      <Provider store={store}>
        <BrowserRouter>
          <Navbar /> {/*Will display the top navigation bar*/}
          <div className="container">
            <Switch>
              <Route exact path="/" component={home}></Route>
              <Route
                exact
                path="/school/arts"
                render={() => <SchoolHome department="ART" />}
              ></Route>
              <Route
                exact
                path="/school/business"
                render={() => <SchoolHome department="BUS" />}
              ></Route>
              <Route
                exact
                path="/school/soc-sci"
                render={() => <SchoolHome department="SOC-SCI" />}
              ></Route>
              <Route
                exact
                path="/school/engineering"
                render={() => <SchoolHome department="ENG" />}
              ></Route>
              <Route
                exact
                path="/school/ics"
                render={() => <SchoolHome department="ICS" />}
              ></Route>
              <Route
                exact
                path="/school/phys-sci"
                render={() => <SchoolHome department="PHY-SCI" />}
              ></Route>
              <Route
                exact
                path="/school/bio-sci"
                render={() => <SchoolHome department="BIO" />}
              ></Route>
              <Route
                exact
                path="/school/humanities"
                render={() => <SchoolHome department="HUM" />}
              ></Route>
              <AuthRoute
                exact
                path="/login"
                component={login}
                //authenticated={authenticated}
              />
              <AuthRoute
                exact
                path="/signup"
                component={signup}
                //authenticated={authenticated}
              />
            </Switch>
          </div>
        </BrowserRouter>
      </Provider>
    );
  }
}

export default App;
